// ==UserScript==
// @name Thanatos
// @description Helps with some aspects of Incremancer
// @match https://incremancer.gti.nz/
// @namespace PurpleMyst
// @author PurpleMyst
// @run-at document-idle
// @version 1.0.0
// ==/UserScript==
"use strict";
const MS_PER_S = 1000;
/**
 * Wait until an element is present in the DOM
 */
const waitForElement = (selector) => new Promise((resolve) => {
    // Check if it's already present
    const firstTry = selector();
    if (firstTry != null) {
        resolve(firstTry);
        return;
    }
    const observer = new MutationObserver(() => {
        const element = selector();
        if (element == null)
            return;
        observer.disconnect();
        resolve(element);
    });
    observer.observe(document, {
        childList: true,
        subtree: true,
        characterData: true,
        attributes: true,
    });
});
/**
 *  Find an element in a collection by its textContent
 */
const findByText = (elements, text) => Array.from(elements).find((el) => el.textContent === text);
/**
 */
const spellColor = (spellName) => {
    let hash = 0;
    for (let i = 0; i < spellName.length; i++) {
        const chr = spellName.charCodeAt(i);
        hash = ((hash << 5) - hash + chr) | 0;
    }
    const r = (hash & 0xff0000) >> (2 * 8);
    const g = (hash & 0x00ff00) >> (1 * 8);
    const b = (hash & 0x0000ff) >> (0 * 8);
    return `color: rgb(${r}, ${g}, ${b})`;
};
/**
 * Autoclick a spell everytime it's not on cooldown
 */
const autoclickSpell = async (spellName) => {
    const spell = await waitForElement(() => findByText(document.getElementsByTagName("span"), spellName));
    const timer = spell.parentElement?.getElementsByClassName("timer")?.item(0);
    // If there's no timer, the spell isn't on cooldown and we can click it
    if (timer == null) {
        console.info(`[%cThanatos%c / %c${spellName}%c] Cast!`, spellColor("Thanatos"), "", spellColor(spellName), "");
        spell.click();
        // Wait for the timer to appear
        setTimeout(autoclickSpell, 0, spellName);
    }
    else {
        // If we have a timer, its text will represent how long the cooldown is
        const cooldown = +(timer.textContent || 0);
        console.info(`[%cThanatos%c / %c${spellName}%c] Sleeping for ${cooldown}s`, spellColor("Thanatos"), "", spellColor(spellName), "");
        setTimeout(autoclickSpell, cooldown * MS_PER_S, spellName);
    }
};
/**
 * Autobuy an upgrade
 */
const autobuy = (upgrade) => {
    const button = Array.from(upgrade.getElementsByTagName("button")).find((el) => el.textContent === "Auto");
    if (button) {
        if (upgrade.textContent !== null)
            console.info(`[%cThanatos%c] Autobuying %c${upgrade.textContent}%c `, spellColor("Thanatos"), "", spellColor(upgrade.textContent), "");
        button.click();
    }
};
const closeSidebar = async () => {
    const closeButton = await waitForElement(() => findByText(document.getElementsByTagName("button"), "Close"));
    closeButton.click();
};
const openSidebar = async (section) => {
    const sidebarButtons = await waitForElement(() => document.getElementsByClassName("buttons").item(0));
    const sectionButton = await waitForElement(() => findByText(sidebarButtons.getElementsByTagName("button"), section));
    sectionButton.click();
};
/** Open the shop, select all tabs and autobuy every upgrade */
const autobuyAll = async () => {
    await openSidebar("Shop");
    const tabs = await waitForElement(() => document.querySelector(".tabs"));
    for (let tab of tabs.children) {
        if (tab.textContent === "Complete" || !(tab instanceof HTMLElement))
            continue;
        tab.click();
        for (const upgrade of document.getElementsByClassName("upgrade"))
            autobuy(upgrade);
    }
    closeSidebar();
};
const autoConstruct = async () => {
    await openSidebar("Construction");
    const button = await waitForElement(() => findByText(document.querySelectorAll(".tabs button"), "Auto Off"));
    button.click();
    await closeSidebar();
};
const detonateOnEnd = async () => {
    const spell = await waitForElement(() => findByText(document.getElementsByTagName("span"), "Detonate"));
    const humansLabel = await waitForElement(() => document.querySelector(".stats label:nth-child(3)"));
    const observer = new MutationObserver(() => {
        const humansText = humansLabel.textContent?.split(": ")[1];
        if (humansText == null)
            return;
        const humans = +humansText;
        if (humans === 0) {
            spell.click();
        }
    });
    observer.observe(humansLabel, { characterData: true, subtree: true });
};
// Set up autoclicking for important spells
["Time Warp", "Energy Charge", "Earth Freeze", "Gigazombies"].forEach((spellName) => autoclickSpell(spellName));
detonateOnEnd();
autobuyAll()
    .then(() => autoConstruct())
    .then(() => setInterval(autobuyAll, 30000));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhhbmF0b3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aGFuYXRvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLHNEQUFzRDtBQUN0RCxxQ0FBcUM7QUFDckMsd0JBQXdCO0FBQ3hCLHFCQUFxQjtBQUNyQix3QkFBd0I7QUFDeEIsaUJBQWlCO0FBQ2pCLGtCQUFrQjtBQUVsQixZQUFZLENBQUM7QUFFYixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFFdEI7O0dBRUc7QUFDSCxNQUFNLGNBQWMsR0FBRyxDQUFJLFFBQW9DLEVBQWMsRUFBRSxDQUM3RSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ3RCLGdDQUFnQztJQUNoQyxNQUFNLFFBQVEsR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUM1QixJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7UUFDcEIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xCLE9BQU87S0FDUjtJQUVELE1BQU0sUUFBUSxHQUFHLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLFFBQVEsRUFBRSxDQUFDO1FBQzNCLElBQUksT0FBTyxJQUFJLElBQUk7WUFBRSxPQUFPO1FBQzVCLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN0QixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUN6QixTQUFTLEVBQUUsSUFBSTtRQUNmLE9BQU8sRUFBRSxJQUFJO1FBQ2IsYUFBYSxFQUFFLElBQUk7UUFDbkIsVUFBVSxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFTDs7R0FFRztBQUNILE1BQU0sVUFBVSxHQUFHLENBQ2pCLFFBQXdELEVBQ3hELElBQVksRUFDWixFQUFF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QUcsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxVQUFVLElBQUksSUFBSTtZQUFFLE9BQU87UUFDL0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDM0IsSUFBSSxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2hCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDeEUsQ0FBQyxDQUFDO0FBRUYsMkNBQTJDO0FBQzNDLENBQUMsV0FBVyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUNuRSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUN6QyxDQUFDO0FBRUYsYUFBYSxFQUFFLENBQUM7QUFDaEIsVUFBVSxFQUFFO0tBQ1QsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQzNCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEtBQU0sQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyA9PVVzZXJTY3JpcHQ9PVxyXG4vLyBAbmFtZSBUaGFuYXRvc1xyXG4vLyBAZGVzY3JpcHRpb24gSGVscHMgd2l0aCBzb21lIGFzcGVjdHMgb2YgSW5jcmVtYW5jZXJcclxuLy8gQG1hdGNoIGh0dHBzOi8vaW5jcmVtYW5jZXIuZ3RpLm56L1xyXG4vLyBAbmFtZXNwYWNlIFB1cnBsZU15c3RcclxuLy8gQGF1dGhvciBQdXJwbGVNeXN0XHJcbi8vIEBydW4tYXQgZG9jdW1lbnQtaWRsZVxyXG4vLyBAdmVyc2lvbiAxLjAuMFxyXG4vLyA9PS9Vc2VyU2NyaXB0PT1cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxuY29uc3QgTVNfUEVSX1MgPSAxMDAwO1xyXG5cclxuLyoqXHJcbiAqIFdhaXQgdW50aWwgYW4gZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBET01cclxuICovXHJcbmNvbnN0IHdhaXRGb3JFbGVtZW50ID0gPFQ+KHNlbGVjdG9yOiAoKSA9PiBUIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFByb21pc2U8VD4gPT5cclxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgLy8gQ2hlY2sgaWYgaXQncyBhbHJlYWR5IHByZXNlbnRcclxuICAgIGNvbnN0IGZpcnN0VHJ5ID0gc2VsZWN0b3IoKTtcclxuICAgIGlmIChmaXJzdFRyeSAhPSBudWxsKSB7XHJcbiAgICAgIHJlc29sdmUoZmlyc3RUcnkpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBzZWxlY3RvcigpO1xyXG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgcmVzb2x2ZShlbGVtZW50KTtcclxuICAgIH0pO1xyXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xyXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgIHN1YnRyZWU6IHRydWUsXHJcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXHJcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbi8qKlxyXG4gKiAgRmluZCBhbiBlbGVtZW50IGluIGEgY29sbGVjdGlvbiBieSBpdHMgdGV4dENvbnRlbnRcclxuICovXHJcbmNvbnN0IGZpbmRCeVRleHQgPSAoXHJcbiAgZWxlbWVudHM6IEl0ZXJhYmxlPEhUTUxFbGVtZW50PiB8IEFycmF5TGlrZTxIVE1MRWxlbWVudD4sXHJcbiAgdGV4dDogc3RyaW5nXHJcbikgPT4gQXJyYXkuZnJvbShlbGVtZW50cykuZmluZCgoZWwpID0+IGVsLnRleHRDb250ZW50ID09PSB0ZXh0KTtcclxuXHJcbi8qKlxyXG4gKi9cclxuY29uc3Qgc3BlbGxDb2xvciA9IChzcGVsbE5hbWU6IHN0cmluZykgPT4ge1xyXG4gIGxldCBoYXNoID0gMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNwZWxsTmFtZS5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY2hyID0gc3BlbGxOYW1lLmNoYXJDb2RlQXQoaSk7XHJcbiAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCArIGNocikgfCAwO1xyXG4gIH1cclxuICBjb25zdCByID0gKGhhc2ggJiAweGZmMDAwMCkgPj4gKDIgKiA4KTtcclxuICBjb25zdCBnID0gKGhhc2ggJiAweDAwZmYwMCkgPj4gKDEgKiA4KTtcclxuICBjb25zdCBiID0gKGhhc2ggJiAweDAwMDBmZikgPj4gKDAgKiA4KTtcclxuICByZXR1cm4gYGNvbG9yOiByZ2IoJHtyfSwgJHtnfSwgJHtifSlgO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEF1dG9jbGljayBhIHNwZWxsIGV2ZXJ5dGltZSBpdCdzIG5vdCBvbiBjb29sZG93blxyXG4gKi9cclxuY29uc3QgYXV0b2NsaWNrU3BlbGwgPSBhc3luYyAoc3BlbGxOYW1lOiBzdHJpbmcpID0+IHtcclxuICBjb25zdCBzcGVsbCA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+XHJcbiAgICBmaW5kQnlUZXh0KGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3BhblwiKSwgc3BlbGxOYW1lKVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHRpbWVyID0gc3BlbGwucGFyZW50RWxlbWVudD8uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRpbWVyXCIpPy5pdGVtKDApO1xyXG5cclxuICAvLyBJZiB0aGVyZSdzIG5vIHRpbWVyLCB0aGUgc3BlbGwgaXNuJ3Qgb24gY29vbGRvd24gYW5kIHdlIGNhbiBjbGljayBpdFxyXG4gIGlmICh0aW1lciA9PSBudWxsKSB7XHJcbiAgICBjb25zb2xlLmluZm8oXHJcbiAgICAgIGBbJWNUaGFuYXRvcyVjIC8gJWMke3NwZWxsTmFtZX0lY10gQ2FzdCFgLFxyXG4gICAgICBzcGVsbENvbG9yKFwiVGhhbmF0b3NcIiksXHJcbiAgICAgIFwiXCIsXHJcbiAgICAgIHNwZWxsQ29sb3Ioc3BlbGxOYW1lKSxcclxuICAgICAgXCJcIlxyXG4gICAgKTtcclxuICAgIHNwZWxsLmNsaWNrKCk7XHJcbiAgICAvLyBXYWl0IGZvciB0aGUgdGltZXIgdG8gYXBwZWFyXHJcbiAgICBzZXRUaW1lb3V0KGF1dG9jbGlja1NwZWxsLCAwLCBzcGVsbE5hbWUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBJZiB3ZSBoYXZlIGEgdGltZXIsIGl0cyB0ZXh0IHdpbGwgcmVwcmVzZW50IGhvdyBsb25nIHRoZSBjb29sZG93biBpc1xyXG4gICAgY29uc3QgY29vbGRvd24gPSArKHRpbWVyLnRleHRDb250ZW50IHx8IDApO1xyXG4gICAgY29uc29sZS5pbmZvKFxyXG4gICAgICBgWyVjVGhhbmF0b3MlYyAvICVjJHtzcGVsbE5hbWV9JWNdIFNsZWVwaW5nIGZvciAke2Nvb2xkb3dufXNgLFxyXG4gICAgICBzcGVsbENvbG9yKFwiVGhhbmF0b3NcIiksXHJcbiAgICAgIFwiXCIsXHJcbiAgICAgIHNwZWxsQ29sb3Ioc3BlbGxOYW1lKSxcclxuICAgICAgXCJcIlxyXG4gICAgKTtcclxuICAgIHNldFRpbWVvdXQoYXV0b2NsaWNrU3BlbGwsIGNvb2xkb3duICogTVNfUEVSX1MsIHNwZWxsTmFtZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEF1dG9idXkgYW4gdXBncmFkZVxyXG4gKi9cclxuY29uc3QgYXV0b2J1eSA9ICh1cGdyYWRlOiBFbGVtZW50KSA9PiB7XHJcbiAgY29uc3QgYnV0dG9uID0gQXJyYXkuZnJvbSh1cGdyYWRlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpKS5maW5kKFxyXG4gICAgKGVsKSA9PiBlbC50ZXh0Q29udGVudCA9PT0gXCJBdXRvXCJcclxuICApO1xyXG4gIGlmIChidXR0b24pIHtcclxuICAgIGlmICh1cGdyYWRlLnRleHRDb250ZW50ICE9PSBudWxsKVxyXG4gICAgICBjb25zb2xlLmluZm8oXHJcbiAgICAgICAgYFslY1RoYW5hdG9zJWNdIEF1dG9idXlpbmcgJWMke3VwZ3JhZGUudGV4dENvbnRlbnR9JWMgYCxcclxuICAgICAgICBzcGVsbENvbG9yKFwiVGhhbmF0b3NcIiksXHJcbiAgICAgICAgXCJcIixcclxuICAgICAgICBzcGVsbENvbG9yKHVwZ3JhZGUudGV4dENvbnRlbnQpLFxyXG4gICAgICAgIFwiXCJcclxuICAgICAgKTtcclxuICAgIGJ1dHRvbi5jbGljaygpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGNsb3NlU2lkZWJhciA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBjbG9zZUJ1dHRvbiA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+XHJcbiAgICBmaW5kQnlUZXh0KGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpLCBcIkNsb3NlXCIpXHJcbiAgKTtcclxuICBjbG9zZUJ1dHRvbi5jbGljaygpO1xyXG59O1xyXG5cclxuY29uc3Qgb3BlblNpZGViYXIgPSBhc3luYyAoc2VjdGlvbjogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3Qgc2lkZWJhckJ1dHRvbnMgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PlxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImJ1dHRvbnNcIikuaXRlbSgwKVxyXG4gICk7XHJcbiAgY29uc3Qgc2VjdGlvbkJ1dHRvbiA9IGF3YWl0IHdhaXRGb3JFbGVtZW50KCgpID0+XHJcbiAgICBmaW5kQnlUZXh0KHNpZGViYXJCdXR0b25zLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYnV0dG9uXCIpLCBzZWN0aW9uKVxyXG4gICk7XHJcbiAgc2VjdGlvbkJ1dHRvbi5jbGljaygpO1xyXG59O1xyXG5cclxuLyoqIE9wZW4gdGhlIHNob3AsIHNlbGVjdCBhbGwgdGFicyBhbmQgYXV0b2J1eSBldmVyeSB1cGdyYWRlICovXHJcbmNvbnN0IGF1dG9idXlBbGwgPSBhc3luYyAoKSA9PiB7XHJcbiAgYXdhaXQgb3BlblNpZGViYXIoXCJTaG9wXCIpO1xyXG4gIGNvbnN0IHRhYnMgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhYnNcIikpO1xyXG4gIGZvciAobGV0IHRhYiBvZiB0YWJzLmNoaWxkcmVuKSB7XHJcbiAgICBpZiAodGFiLnRleHRDb250ZW50ID09PSBcIkNvbXBsZXRlXCIgfHwgISh0YWIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgdGFiLmNsaWNrKCk7XHJcbiAgICBmb3IgKGNvbnN0IHVwZ3JhZGUgb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInVwZ3JhZGVcIikpXHJcbiAgICAgIGF1dG9idXkodXBncmFkZSk7XHJcbiAgfVxyXG4gIGNsb3NlU2lkZWJhcigpO1xyXG59O1xyXG5cclxuY29uc3QgYXV0b0NvbnN0cnVjdCA9IGFzeW5jICgpID0+IHtcclxuICBhd2FpdCBvcGVuU2lkZWJhcihcIkNvbnN0cnVjdGlvblwiKTtcclxuICBjb25zdCBidXR0b24gPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PlxyXG4gICAgZmluZEJ5VGV4dChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYnMgYnV0dG9uXCIpLCBcIkF1dG8gT2ZmXCIpXHJcbiAgKTtcclxuICBidXR0b24uY2xpY2soKTtcclxuICBhd2FpdCBjbG9zZVNpZGViYXIoKTtcclxufTtcclxuXHJcbmNvbnN0IGRldG9uYXRlT25FbmQgPSBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3Qgc3BlbGwgPSBhd2FpdCB3YWl0Rm9yRWxlbWVudCgoKSA9PlxyXG4gICAgZmluZEJ5VGV4dChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNwYW5cIiksIFwiRGV0b25hdGVcIilcclxuICApO1xyXG4gIGNvbnN0IGh1bWFuc0xhYmVsID0gYXdhaXQgd2FpdEZvckVsZW1lbnQoKCkgPT5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc3RhdHMgbGFiZWw6bnRoLWNoaWxkKDMpXCIpXHJcbiAgKTtcclxuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcclxuICAgIGNvbnN0IGh1bWFuc1RleHQgPSBodW1hbnNMYWJlbC50ZXh0Q29udGVudD8uc3BsaXQoXCI6IFwiKVsxXTtcclxuICAgIGlmIChodW1hbnNUZXh0ID09IG51bGwpIHJldHVybjtcclxuICAgIGNvbnN0IGh1bWFucyA9ICtodW1hbnNUZXh0O1xyXG4gICAgaWYgKGh1bWFucyA9PT0gMCkge1xyXG4gICAgICBzcGVsbC5jbGljaygpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIG9ic2VydmVyLm9ic2VydmUoaHVtYW5zTGFiZWwsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcclxufTtcclxuXHJcbi8vIFNldCB1cCBhdXRvY2xpY2tpbmcgZm9yIGltcG9ydGFudCBzcGVsbHNcclxuW1wiVGltZSBXYXJwXCIsIFwiRW5lcmd5IENoYXJnZVwiLCBcIkVhcnRoIEZyZWV6ZVwiLCBcIkdpZ2F6b21iaWVzXCJdLmZvckVhY2goXHJcbiAgKHNwZWxsTmFtZSkgPT4gYXV0b2NsaWNrU3BlbGwoc3BlbGxOYW1lKVxyXG4pO1xyXG5cclxuZGV0b25hdGVPbkVuZCgpO1xyXG5hdXRvYnV5QWxsKClcclxuICAudGhlbigoKSA9PiBhdXRvQ29uc3RydWN0KCkpXHJcbiAgLnRoZW4oKCkgPT4gc2V0SW50ZXJ2YWwoYXV0b2J1eUFsbCwgMzBfMDAwKSk7XHJcbiJdfQ==